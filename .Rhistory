names(ps_cntt)<-gco
ps_cntt[pt[,1]]<-pt[,2]
psit_counts<-cbind(psit_counts,ps_cntt)
}
#mid
for(i in iters){
a<-narrow(txs_seqq,start = mid_pos+3*i,end = mid_pos+(2+3*i))
coood<-as.character(a)
at<-table(a)
cod_cntt<-rep(0,length(gco))
names(cod_cntt)<-gco
cod_cntt[names(at)]<-as.numeric(at)
cod_counts<-cbind(cod_counts,cod_cntt)
pt<-rowSums(as.matrix(ps_win_cds[,(34+3*i):(36+3*i)]))
names(pt)<-coood
pt<-aggregate(pt,list(names(pt)),sum)
ps_cntt<-rep(0,length(gco))
names(ps_cntt)<-gco
ps_cntt[pt[,1]]<-pt[,2]
psit_counts<-cbind(psit_counts,ps_cntt)
}
#end
for(i in iters){
a<-narrow(txs_seqq,start = end_pos+3*i,end = end_pos+(2+3*i))
coood<-as.character(a)
at<-table(a)
cod_cntt<-rep(0,length(gco))
names(cod_cntt)<-gco
cod_cntt[names(at)]<-as.numeric(at)
cod_counts<-cbind(cod_counts,cod_cntt)
pt<-rowSums(as.matrix(ps_win_cds[,(67+3*i):(69+3*i)]))
names(pt)<-coood
pt<-aggregate(pt,list(names(pt)),sum)
ps_cntt<-rep(0,length(gco))
names(ps_cntt)<-gco
ps_cntt[pt[,1]]<-pt[,2]
psit_counts<-cbind(psit_counts,ps_cntt)
}
colnames(psit_counts)<-c(paste("first",seq(1,11),sep="_"),paste("mid",seq(1,11),sep="_"),paste("last",seq(1,11),sep="_"))
colnames(cod_counts)<-c(paste("first",seq(1,11),sep="_"),paste("mid",seq(1,11),sep="_"),paste("last",seq(1,11),sep="_"))
ratio_psit_cod<-psit_counts/cod_counts
psit_counts<-DataFrame(psit_counts)
cod_counts<-DataFrame(cod_counts)
ratio_psit_cod<-DataFrame(ratio_psit_cod)
gcall<-paste(gco,names(gco),sep=";")
rownames(psit_counts)<-gcall[match(rownames(psit_counts),gco)]
rownames(cod_counts)<-gcall[match(rownames(cod_counts),gco)]
rownames(ratio_psit_cod)<-gcall[match(rownames(ratio_psit_cod),gco)]
cod_win[[len]]<-cod_counts
ps_cod[[len]]<-psit_counts
ps_cod_rat[[len]]<-ratio_psit_cod
tls<-cbind(ps_tiles_5,ps_tiles_cds,ps_tiles_3)
colnames(tls)<-c(paste("5_UTR",1:length(ps_tiles_5[1,]),sep="_"),paste("CDS",1:length(ps_tiles_cds[1,]),sep="_"),paste("3_UTR",1:length(ps_tiles_3[1,]),sep="_"))
nts<-cbind(ps_win_5,ps_win_cds,ps_win_3)
colnames(nts)<-c(paste("5_UTR",1:length(ps_win_5[1,]),sep="_"),paste("CDS",1:length(ps_win_cds[1,]),sep="_"),paste("3_UTR",1:length(ps_win_3[1,]),sep="_"))
ps_tiles[[len]]<-tls
ps_win[[len]]<-nts
}
codons_win_all[[comp]]<-cod_win
ps_codons_ratio[[comp]]<-ps_cod_rat
ps_codons_counts[[comp]]<-ps_cod
ps_signals_tiles_all[[comp]]<-ps_tiles
ps_signals_win_all[[comp]]<-ps_win
}
}
fast_mode=T
if(length(ps)>0){
for(comp in c("nucl",circs)){
tile_cds<-list_txs_ok[[comp]]
#put positive?
strand(tile_cds)<-"+"
tile_cds<-tile_cds[width(tile_cds)>100]
checkgen<-TRUE
if(comp=="nucl"){
if((sum((start(tile_cds)>50))/length(start(tile_cds)))>.33){tile_cds<-tile_cds[start(tile_cds)>50];checkgen<-FALSE}
if(sum(seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]-end(tile_cds)>100)/length(tile_cds)>.33){
tile_cds<-tile_cds[seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]-end(tile_cds)>100];checkgen<-FALSE}
ps_comp<-GRangesList(lapply(ps,function(x){sort(x[!seqnames(x)%in%circs])}))
} else {ps_comp<-GRangesList(lapply(ps,function(x){sort(x[seqnames(x)==comp])}))}
signal_ps<-list()
signal_ps_nt<-list()
all_ps<-unlist(ps_comp)
ps_comp[["all"]]<-all_ps
mp<-mapToTranscripts(all_ps,transcripts = GTF_annotation$exons_txs[as.vector(seqnames(tile_cds))])
mp$score<-all_ps$score[mp$xHits]
#put seqlevels for compartment only to speed up stuff
seqlevels(mp)<-names(GTF_annotation$exons_txs)
seqlengths(mp)<-sum(width(GTF_annotation$exons_txs))
covtx<-coverage(mp,weight = mp$score)
ok_txs<-names(covtx[elementNROWS(runValue(covtx))>25])
if(length(ok_txs)<5){
ps_signals_tiles_all[[comp]]<-c()
ps_signals_win_all[[comp]]<-c()
next
}
#keep all txs if small n of txs
if(length(ok_txs)>=5 & length(covtx)<250){
ok_txs<-names(covtx)
}
if(length(ok_txs)>5000){
cnts_txss_agg<-sort(sum(covtx),decreasing = T)
ok_txs<-names(cnts_txss_agg)[1:5000]
}
if(fast_mode[bammo]==T){
if(length(ok_txs)>500){
cnts_txss_agg<-sort(sum(covtx),decreasing = T)
ok_txs<-names(cnts_txss_agg)[1:500]
}
}
fivs<-GRanges(seqnames = seqnames(GTF_annotation$cds_txs_coords),ranges = IRanges(start=1,end = start(GTF_annotation$cds_txs_coords)),strand="*")
fivs<-fivs[as.character(seqnames(fivs))%in%ok_txs]
fivs_gen<-unlist(pmapFromTranscripts(fivs,transcripts = GTF_annotation$exons_txs[as.character(seqnames(fivs))],ignore.strand=F))
fivs_gen<-fivs_gen[fivs_gen$hit]
fivs_gen<-split(fivs_gen,names(fivs_gen))
threes<-GRanges(seqnames = seqnames(GTF_annotation$cds_txs_coords),ranges = IRanges(start=end(GTF_annotation$cds_txs_coords),end = GTF_annotation$cds_txs_coords$lentx),strand="*")
threes<-threes[as.character(seqnames(threes))%in%ok_txs]
threes_gen<-unlist(pmapFromTranscripts(threes,transcripts = GTF_annotation$exons_txs[as.character(seqnames(threes))],ignore.strand=F))
threes_gen<-threes_gen[threes_gen$hit]
threes_gen<-split(threes_gen,names(threes_gen))
cds_gen<-GTF_annotation$cds_txs[ok_txs]
tile_cds<-tile_cds[as.character(seqnames(tile_cds))%in%ok_txs]
ok_txs<-unique(as.character(seqnames(tile_cds)))
seqlevels(tile_cds)<-ok_txs
list_covs<-list()
list_covs[["all"]]<-covtx
tile_5<-GRanges(seqnames(tile_cds),ranges = IRanges(start=1,end = start(tile_cds)))
tile_3<-GRanges(seqnames(tile_cds),ranges = IRanges(start = end(tile_cds),end = seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]))
no5utr<-width(tile_5)<51
no3utr<-width(tile_3)<51
ex_annot<-GTF_annotation$exons_txs
if(sum(no5utr)>0){
tx_notok<-seqnames(tile_5)[no5utr]
annot_notok<-ex_annot[tx_notok]
annot_ok<-GRangesList(lapply(annot_notok, function(x){
if(length(x)==0){return(x)}
x[1]<-resize(x[1],width = width(x[1])+51,fix = "end")
x
}))
ex_annot[names(annot_ok)]<-annot_ok
seqlengths(tile_cds)[as.vector(tx_notok)]<-sum(width(annot_ok))
tile_cds[no5utr]<-shift(tile_cds[no5utr],+51)
tile_5<-GRanges(seqnames(tile_cds),ranges = IRanges(start=1,end = start(tile_cds)))
tile_3<-GRanges(seqnames(tile_cds),ranges = IRanges(start = end(tile_cds),end = seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]))
mp<-mapToTranscripts(all_ps,transcripts = ex_annot[as.vector(seqnames(tile_cds))])
seqlevels(mp)<-seqlevels(tile_cds)
seqlengths(mp)<-seqlengths(tile_cds)
mp$score<-all_ps$score[mp$xHits]
covtx<-coverage(mp,weight = mp$score)
list_covs[["all"]]<-covtx
}
if(sum(no3utr)>0){
tx_notok<-seqnames(tile_3)[no3utr]
annot_notok<-ex_annot[tx_notok]
annot_ok<-GRangesList(lapply(annot_notok, function(x){
if(length(x)==0){return(x)}
x[length(x)]<-resize(x[length(x)],width = width(x[length(x)])+51,fix = "start")
x
}))
ex_annot[names(annot_ok)]<-annot_ok
seqlengths(tile_cds)[as.vector(tx_notok)]<-sum(width(annot_ok))
tile_5<-GRanges(seqnames(tile_cds),ranges = IRanges(start=1,end = start(tile_cds)))
tile_3<-GRanges(seqnames(tile_cds),ranges = IRanges(start = end(tile_cds),end = seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]))
mp<-mapToTranscripts(all_ps,transcripts = ex_annot[as.vector(seqnames(tile_cds))])
seqlevels(mp)<-seqlevels(tile_cds)
seqlengths(mp)<-seqlengths(tile_cds)
mp$score<-all_ps$score[mp$xHits]
covtx<-coverage(mp,weight = mp$score)
list_covs[["all"]]<-covtx
}
ps_tiles<-DataFrameList()
ps_win<-DataFrameList()
cod_win<-DataFrameList()
ps_cod<-DataFrameList()
ps_cod_rat<-DataFrameList()
for(len in c("all",names(ps_comp))){
if((sum(no3utr) + sum(no5utr))==0){
mp<-mapToTranscripts(ps_comp[[len]],transcripts = fivs_gen)
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-names(fivs_gen)
seqlengths(mp)<-sum(width(fivs_gen))
cov_5<-coverage(mp,weight = mp$score)
mp<-mapToTranscripts(ps_comp[[len]],transcripts = threes_gen)
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-names(threes_gen)
seqlengths(mp)<-sum(width(threes_gen))
cov_3<-coverage(mp,weight = mp$score)
mp<-mapToTranscripts(ps_comp[[len]],transcripts = cds_gen)
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-names(cds_gen)
seqlengths(mp)<-sum(width(cds_gen))
cov_cds<-coverage(mp,weight = mp$score)
}
if((sum(no3utr) + sum(no5utr))>0){
if(len!="all"){
mp<-mapToTranscripts(ps_comp[[len]],transcripts = ex_annot[as.vector(seqnames(tile_cds))])
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-seqlevels(tile_cds)
seqlengths(mp)<-seqlengths(tile_cds)
covtx<-coverage(mp,weight = mp$score)
covtx<-covtx[ok_txs]
}
cov_5<-covtx[tile_5]
cov_3<-covtx[tile_3]
cov_cds<-covtx[tile_cds]
}
ps_tiles_5<-DataFrame(t(sapply(cov_5,function(x){
clos<-50*(round(length(x)/50,digits = 0)+1)
idx<-as.integer(seq(1,length(x),length.out = clos))
colMeans(matrix(x[idx],ncol = 50))
})))
ps_win_5<-DataFrame(t(sapply(cov_5,function(x){as.vector(x)[c(1:25,(length(x)-25):(length(x)-1))]})))
ps_tiles_3<-DataFrame(t(sapply(cov_3,function(x){
clos<-50*(round(length(x)/50,digits = 0)+1)
idx<-as.integer(seq(1,length(x),length.out = clos))
colMeans(matrix(x[idx],ncol = 50))
})))
ps_win_3<-DataFrame(t(sapply(cov_3,function(x){as.vector(x)[c(2:26,(length(x)-24):length(x))]})))
ps_tiles_cds<-DataFrame(t(sapply(cov_cds,function(x){
clos<-100*(round(length(x)/100,digits = 0)+1)
idx<-as.integer(seq(1,length(x),length.out = clos))
colMeans(matrix(x[idx],ncol = 100))
})))
ps_win_cds<-DataFrame(t(sapply(cov_cds,function(x){
rnd<-as.integer(length(x)/2)%%3
mid<-(as.integer(length(x)/2)-rnd)
as.vector(x)[c(1:33,(mid-17):(mid+15),(length(x)-32):length(x))]
})))
#select txs, output codon usage
txs_seqq<-extractTranscriptSeqs(x = genome_seq,transcripts = GTF_annotation$cds_txs[names(cov_cds)])
gco <- as.character(names(getGeneticCode("1")))
names(gco)<-as.character(getGeneticCode("1"))
#Get genetic code for compartment
gen_cods<-GTF_annotation$genetic_codes
circ_cods<-which(comp==rownames(gen_cods))
if(length(circ_cods)>0){
gco <- as.character(names(getGeneticCode(gen_cods$genetic_code[circ_cods])))
names(gco)<-as.character(getGeneticCode(gen_cods$genetic_code[circ_cods]))
}
rnd<-as.integer(width(txs_seqq)/2)%%3
st_pos<-rep(1,length(txs_seqq))
mid_pos<-(as.integer(width(txs_seqq)/2)-rnd)-17
end_pos<-width(txs_seqq)-32
iters<-seq(0,10)
cod_counts<-c()
psit_counts<-c()
#Calculate codon occurrence and occupancy for different CDS sections
#OUTPUT AA?
for(i in iters){
a<-narrow(txs_seqq,start = st_pos+3*i,end = st_pos+(2+3*i))
coood<-as.character(a)
at<-table(a)
cod_cntt<-rep(0,length(gco))
names(cod_cntt)<-gco
cod_cntt[names(at)]<-as.numeric(at)
cod_counts<-cbind(cod_counts,cod_cntt)
pt<-rowSums(as.matrix(ps_win_cds[,(1+3*i):(3+3*i)]))
names(pt)<-coood
pt<-aggregate(pt,list(names(pt)),sum)
ps_cntt<-rep(0,length(gco))
names(ps_cntt)<-gco
ps_cntt[pt[,1]]<-pt[,2]
psit_counts<-cbind(psit_counts,ps_cntt)
}
#mid
for(i in iters){
a<-narrow(txs_seqq,start = mid_pos+3*i,end = mid_pos+(2+3*i))
coood<-as.character(a)
at<-table(a)
cod_cntt<-rep(0,length(gco))
names(cod_cntt)<-gco
cod_cntt[names(at)]<-as.numeric(at)
cod_counts<-cbind(cod_counts,cod_cntt)
pt<-rowSums(as.matrix(ps_win_cds[,(34+3*i):(36+3*i)]))
names(pt)<-coood
pt<-aggregate(pt,list(names(pt)),sum)
ps_cntt<-rep(0,length(gco))
names(ps_cntt)<-gco
ps_cntt[pt[,1]]<-pt[,2]
psit_counts<-cbind(psit_counts,ps_cntt)
}
#end
for(i in iters){
a<-narrow(txs_seqq,start = end_pos+3*i,end = end_pos+(2+3*i))
coood<-as.character(a)
at<-table(a)
cod_cntt<-rep(0,length(gco))
names(cod_cntt)<-gco
cod_cntt[names(at)]<-as.numeric(at)
cod_counts<-cbind(cod_counts,cod_cntt)
pt<-rowSums(as.matrix(ps_win_cds[,(67+3*i):(69+3*i)]))
names(pt)<-coood
pt<-aggregate(pt,list(names(pt)),sum)
ps_cntt<-rep(0,length(gco))
names(ps_cntt)<-gco
ps_cntt[pt[,1]]<-pt[,2]
psit_counts<-cbind(psit_counts,ps_cntt)
}
colnames(psit_counts)<-c(paste("first",seq(1,11),sep="_"),paste("mid",seq(1,11),sep="_"),paste("last",seq(1,11),sep="_"))
colnames(cod_counts)<-c(paste("first",seq(1,11),sep="_"),paste("mid",seq(1,11),sep="_"),paste("last",seq(1,11),sep="_"))
ratio_psit_cod<-psit_counts/cod_counts
psit_counts<-DataFrame(psit_counts)
cod_counts<-DataFrame(cod_counts)
ratio_psit_cod<-DataFrame(ratio_psit_cod)
gcall<-paste(gco,names(gco),sep=";")
rownames(psit_counts)<-gcall[match(rownames(psit_counts),gco)]
rownames(cod_counts)<-gcall[match(rownames(cod_counts),gco)]
rownames(ratio_psit_cod)<-gcall[match(rownames(ratio_psit_cod),gco)]
cod_win[[len]]<-cod_counts
ps_cod[[len]]<-psit_counts
ps_cod_rat[[len]]<-ratio_psit_cod
tls<-cbind(ps_tiles_5,ps_tiles_cds,ps_tiles_3)
colnames(tls)<-c(paste("5_UTR",1:length(ps_tiles_5[1,]),sep="_"),paste("CDS",1:length(ps_tiles_cds[1,]),sep="_"),paste("3_UTR",1:length(ps_tiles_3[1,]),sep="_"))
nts<-cbind(ps_win_5,ps_win_cds,ps_win_3)
colnames(nts)<-c(paste("5_UTR",1:length(ps_win_5[1,]),sep="_"),paste("CDS",1:length(ps_win_cds[1,]),sep="_"),paste("3_UTR",1:length(ps_win_3[1,]),sep="_"))
ps_tiles[[len]]<-tls
ps_win[[len]]<-nts
}
codons_win_all[[comp]]<-cod_win
ps_codons_ratio[[comp]]<-ps_cod_rat
ps_codons_counts[[comp]]<-ps_cod
ps_signals_tiles_all[[comp]]<-ps_tiles
ps_signals_win_all[[comp]]<-ps_win
}
}
res_5<-list(ps_signals_tiles_all,ps_signals_win_all,codons_win_all,ps_codons_counts,ps_codons_ratio)
res_all$P_sites_stats
res_all$P_sites_stats$P_sites_all
unlist(res_all$P_sites_stats$P_sites_all)
comp
comp
tile_cds<-list_txs_ok[[comp]]
tile_cds
#put positive?
strand(tile_cds)<-"+"
tile_cds<-tile_cds[width(tile_cds)>100]
checkgen<-TRUE
if(comp=="nucl"){
if((sum((start(tile_cds)>50))/length(start(tile_cds)))>.33){tile_cds<-tile_cds[start(tile_cds)>50];checkgen<-FALSE}
if(sum(seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]-end(tile_cds)>100)/length(tile_cds)>.33){
tile_cds<-tile_cds[seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]-end(tile_cds)>100];checkgen<-FALSE}
ps_comp<-GRangesList(lapply(ps,function(x){sort(x[!seqnames(x)%in%circs])}))
} else {ps_comp<-GRangesList(lapply(ps,function(x){sort(x[seqnames(x)==comp])}))}
ps_comp
unlist(ps_comp)
signal_ps<-list()
signal_ps_nt<-list()
all_ps<-unlist(ps_comp)
all_ps
ps_comp[["all"]]<-all_ps
mp<-mapToTranscripts(all_ps,transcripts = GTF_annotation$exons_txs[as.vector(seqnames(tile_cds))])
mp$score<-all_ps$score[mp$xHits]
mp
#put seqlevels for compartment only to speed up stuff
seqlevels(mp)<-names(GTF_annotation$exons_txs)
seqlengths(mp)<-sum(width(GTF_annotation$exons_txs))
covtx<-coverage(mp,weight = mp$score)
ok_txs<-names(covtx[elementNROWS(runValue(covtx))>25])
ok_txs
names(covtx[elementNROWS(runValue(covtx))>25])
names(covtx[elementNROWS(runValue(covtx))>10])
?scale
setwd("/bfd/lcalviel/data/riboseq/DDX3_paper_Markus/To_github")
library("GenomicFeatures")
library("rtracklayer")
library(DEXSeq)
library(riborex)
library(ggplot2)
library("gplots")
library("reshape2")
library("ggrepel")
library("topGO")
library("org.Hs.eg.db")
library(gridExtra)
library("cowplot")
library("ggridges")
library(mixtools)
library(ggplot2)
library(corrgram)
library(Biostrings)
load("data/gencode.v25.annotation.gtf_Rannot")
load("data/res_DE")
load("data/gene_level_tpms")
load("data/sequences_Robj")
results_DE<-res_DE_markus
DE_type="protein coding genes"
riborex<-results_DE$Riborex_DESeq_cds
ttl<-colnames(results_DE$DEXSeq_ribo_5cds3)[grep(x=colnames(results_DE$DEXSeq_ribo_5cds3),pattern="log2")]
ttl<-gsub(ttl,pattern = "log2fold_",replacement = "")
ttl<-paste(ttl,"\n",DE_type)
if(DE_type=="protein coding genes"){
des_rna<-results_DE$DESeq_rna_cds
des_rna<-des_rna[order(des_rna$log2FoldChange,decreasing = T),]
des_ribo<-results_DE$DESeq_ribo_cds
des_ribo<-des_ribo[match(rownames(des_rna),rownames(des_ribo)),]
}
if(DE_type=="all genes"){
des_rna<-results_DE$DESeq_rna_ex
des_rna<-des_rna[order(des_rna$log2FoldChange,decreasing = T),]
des_ribo<-results_DE$DESeq_ribo_ex
des_ribo<-des_ribo[match(rownames(des_rna),rownames(des_ribo)),]
}
#PREPARE DE_PLOT
des_all<-des_rna
des_all$pvalue<-NULL
des_all$baseMean_rna<-des_rna$baseMean
des_all$baseMean_ribo<-des_ribo$baseMean
des_all$log2FoldChange_rna<-des_rna$log2FoldChange
des_all$padj_rna<-des_rna$padj
des_all$log2FoldChange_ribo<-des_ribo$log2FoldChange
des_all$padj_ribo<-des_ribo$padj
des_all$log2FoldChange_riborna<-riborex$log2FoldChange[match(rownames(des_all),rownames(riborex))]
des_all$padj_riborna<-riborex$padj[match(rownames(des_all),rownames(riborex))]
des_ribo_5cds3<-results_DE$DEXSeq_ribo_5cds3[,c(colnames(results_DE$DEXSeq_ribo_5cds3)[grep(x=colnames(results_DE$DEXSeq_ribo_5cds3),pattern="log2")],"pvalue","groupID","featureID","exonBaseMean")]
colnames(des_ribo_5cds3)<-c("log2FoldChange","pval_5ut","groupID","featureID","fiveUTR_BaseMean")
des_ribo_5cds3<-des_ribo_5cds3[des_ribo_5cds3$featureID=="E001",]
des_all$log2FoldChange_5ut<-des_ribo_5cds3$log2FoldChange[match(rownames(des_all),des_ribo_5cds3$groupID)]
des_all$pval_5ut<-des_ribo_5cds3$pval_5ut[match(rownames(des_all),des_ribo_5cds3$groupID)]
des_all$baseMean_5ut<-des_ribo_5cds3$fiveUTR_BaseMean[match(rownames(des_all),des_ribo_5cds3$groupID)]
des_all$chrM<-ifelse(test = seqnames(GTF_annotation$genes[rownames(des_all)])=="chrM",yes = T,no = F)
des_all$gene_id<-rownames(des_all)
des_all<-des_all[,c("gene_id","baseMean_rna","baseMean_ribo","baseMean_5ut",colnames(des_all)[grep(colnames(des_all),pattern = "log2FoldChange_|padj_|pval|exonBaseM")])]
ggmnn<-unique(GTF_annotation$trann[,c("gene_id","gene_name")])
des_all$symb<-GTF_annotation$trann$gene_name[match(rownames(des_all),GTF_annotation$trann$gene_id)]
des_all$biotype<-GTF_annotation$trann$gene_biotype[match(rownames(des_all),GTF_annotation$trann$gene_id)]
oklow<-which(des_all$baseMean_rna>0 | des_all$baseMean_ribo>0)
des_all<-des_all[oklow,]
#CALCULATE 5'UTR OCCUPANCY CHANGE
cnts<-res_DE_markus$DEXSeq_ribo_5cds3$countData
cnts<-apply(cnts,2,FUN = function(x){x/(sum(x)/1e06)})
cnts_5<-cnts[grep(rownames(cnts),pattern = "E001"),]
cnts_cds<-cnts[grep(rownames(cnts),pattern = "E002"),]
rownames(cnts_5)<-sapply(strsplit(rownames(cnts_5),":"),"[[",1)
rownames(cnts_cds)<-sapply(strsplit(rownames(cnts_cds),":"),"[[",1)
cnts_all<-cbind(cnts_5,cnts_cds)
ratios<-t(apply(cnts_all,1,function(x){
fv_si<-mean(x[1],x[2])
fv_wt<-mean(x[3],x[4])
cds_si<-mean(x[5],x[6])
cds_wt<-mean(x[7],x[8])
rts_si<-fv_si/cds_si
rts_wt<-fv_wt/cds_wt
c(rts_si,rts_wt)
}))
ratios<-ratios[complete.cases(ratios) & ratios[,1]!=0 & ratios[,2]!=0 & ratios[,1]!=Inf & ratios[,2]!=Inf,]
gnms<-GTF_annotation$trann$gene_name[match(rownames(ratios),GTF_annotation$trann$gene_id)]
log2FC_5utrcds<-log2(ratios[,1]/ratios[,2])
des_all$log2FC_5utrcds<-log2FC_5utrcds[des_all$gene_id]
write.table(des_all,file = "data/DE_table.csv",row.names = FALSE,sep="\t",quote = FALSE)
ok1<-which(des_all$baseMean_rna>20 & des_all$baseMean_ribo>20)
des_all<-des_all[ok1,]
des_all$tx_type<-"Not_significant"
des_all$tx_type[des_all$padj_rna<.05 & des_all$log2FoldChange_rna<0]<-"RNA_down"
des_all$tx_type[des_all$padj_rna<.05 & des_all$log2FoldChange_rna>0]<-"RNA_up"
des_all$tx_type[des_all$padj_riborna<.05 & des_all$log2FoldChange_riborna<0]<-"TE_down"
des_all$tx_type[des_all$padj_riborna<.05 & des_all$log2FoldChange_riborna>0]<-"TE_up"
euc_dist<-des_all$log2FoldChange_rna-des_all$log2FoldChange_ribo
#CORRECT FOR MIXED DE GENES
eucrna<-euc_dist[des_all$tx_type=="RNA_up"]
mixt<-normalmixEM(eucrna,mu = c(0,.4),k = 2,mean.constr = c(0,.4))
clstss<-apply(mixt$posterior,1,which.max)
names(clstss)<-des_all$gene_id[des_all$tx_type=="RNA_up"]
des_all$clustr<-3
des_all$clustr[des_all$tx_type=="RNA_up"]<-clstss
des_all$tx_type2<-des_all$tx_type
des_all$tx_type2[des_all$clustr==1]<-"RNA_up_clean"
des_all$tx_type2[des_all$clustr==2]<-"Mixed"
ddf<-rbind(cbind(des_all$log2FoldChange_rna-des_all$log2FoldChange_ribo,des_all$tx_type),cbind(des_all$log2FoldChange_rna[des_all$clustr!=3]-des_all$log2FoldChange_ribo[des_all$clustr!=3],des_all$tx_type2[des_all$clustr!=3]))
ddf<-as.data.frame(ddf)
colnames(ddf)<-c("RNA_Ribo","tx_class")
ddf$RNA_Ribo<-as.numeric(as.character(ddf$RNA_Ribo))
ddf$tx_class<-as.character(ddf$tx_class)
ddf$tx_class[ddf$tx_class=="RNA_up"]<-"RNA_up_original"
ddf$tx_class<-factor(ddf$tx_class,levels=rev(c("Not_significant","RNA_down","TE_up","TE_down","RNA_up_original","RNA_up_clean","Mixed")))
colli<-alpha(c("dark grey","cornflowerblue","dark red","blue","black","orange","dark blue"),.7)
correct_rna<-ggplot(ddf,aes(RNA_Ribo,y=tx_class,fill=tx_class))+
stat_density_ridges(bandwidth = .04) +
xlab("RNA - Ribo\nFold Change") +
ylab("Density") +
scale_fill_manual(values = rev(colli),"Tx_class") +
scale_color_manual(values = rev(colli),"Tx_class") +
theme_classic() +
theme(axis.title.x = element_text(size=22),axis.text.x  = element_text(angle=0, vjust=0.5, size=18)) +
theme(axis.title.y = element_text(size=18),axis.text.y  = element_text(angle=0, vjust=0.5, size=18))  +
theme(strip.text.x = element_text(size=10, face="bold"),strip.text.y = element_text(size=24),strip.background = element_rect(colour="black", fill="white"))
des_all$tx_type2[des_all$clustr==1]<-"RNA_up"
pdf(file = "figures/correct_DE.pdf",width = 7,height = 4)
print(correct_rna + theme(legend.position="none"))
dev.off()
write.table(des_all,file = "data/DE_table_ok.csv",row.names = FALSE,sep="\t",quote = FALSE)
ok1<-which(des_all$baseMean_rna>20 & des_all$baseMean_ribo>20)
des_all<-des_all[ok1,]
dfa=des_all
dfa<-as.data.frame(dfa)
dfa<-dfa[grep(dfa$biotype,pattern = "pseudo|snRNA|snoRNA",invert = T),]
dfa$biotype[dfa$biotype!="protein_coding"]<-"non_coding"
dfa$tx_type<-"Not_significant"
dfa$tx_type[dfa$padj_rna<.05 & dfa$log2FoldChange_rna<0]<-"RNA_down"
dfa$tx_type[dfa$padj_rna<.05 & dfa$log2FoldChange_rna>0]<-"RNA_up"
dfa$tx_type[dfa$padj_riborna<.05 & dfa$log2FoldChange_riborna<0]<-"TE_down"
dfa$tx_type[dfa$padj_riborna<.05 & dfa$log2FoldChange_riborna>0]<-"TE_up"
dfa2<-dfa
dfa2<-dfa2[dfa2$tx_type2!="Mixed",]
dfa2$Tx_class<-factor(dfa2$tx_type2,levels=rev(c("Not_significant","RNA_up","RNA_down","TE_up","TE_down")))
grd<-ggplot(dfa2,aes(log2FC_5utrcds,group=Tx_class,y=Tx_class,fill=Tx_class))  +theme_ridges()
grd<-grd + scale_fill_manual(values=c("blue","dark red","cornflowerblue","firebrick1","dark grey"))
grd<-grd +xlim(-4,4) + xlab("log2FC_5'UTR_skew")
grd<-grd + stat_density_ridges(quantile_lines = TRUE, quantiles = 2) + geom_vline(xintercept = 0,lty=2,color="black")
grd<-grd + theme(legend.position="none")
pdf(file = "figures/DE_5riboskew.pdf",width = 7,height = 4)
print(grd)
dev.off()
print(grd)
